cheese.diff <- (cheese.data[,2], lag=1)
cheese.diff <- (cheese.data[,2], lag=1)
cheese.diff <- diff(cheese.data[,2], lag=1)
acf(cheese.diff, lag.max=12, type="correlation", main="ACF")
acf(cheese.diff, lag.max=12, type="partial", main="PACF")
yield.log <- log(yield[,2])
diff <- diff(yield.log, lag=1)
acf(diff, lag.max=160, type="correlation",main="ACF")
head(diff)
class(yield.log)
head(yield.log)
as.numeric(yield.log)
plot(diff.yield.log)
yield.log <- c(1:647,log(yield[,2]))
log(yield[,2])
as.data.frame(yield.log)
as.vector(yield.log)
yield.log <- as.vector(log(yield[,2]))
diff <- diff(yield.log, lag=1)
diff
class(yield)
class(yield.log[,2])
as.data.frame(yield)
yield <- as.data.frame(yield)
yield$log <- log(yield[,2])
View(ice.data)
View(yield)
yield.log <- yield[,c(1,3)]
yield.diff <- diff(yield.log, lag=1)
yield.diff <- diff(yield.log[,2], lag=1)
acf(yield.diff, lag.max=20, type="correlation", main="transformed ACF")
acf(yield.diff, lag.max=20, type="partial", main="transformed PACF")
plot(diff(diff(ice.data, lag=1), lag=1), type="p", pch=16, cex=.5)
plot(diff(diff(ice.data[,2], lag=1), lag=1), type="p", pch=16, cex=.5)
plot(diff(ice.data[,2], lag=1), type="p", pch=16, cex=.5)
diff(ice.data[,2], lag=1)
View(cheese.data)
ice.data <- read.csv("icecream.csv")
diff(ice.data[,2], lag=1)
plot(diff(ice.data[,2], lag=1), type="p", pch=16, cex=.5)
yield <- as.data.frame(yield)
yield$log <- log(yield[,2])
yield.log <- yield[,c(1,3)]
yield.diff <- diff(yield.log[,2], lag=1)
par(mfrow=c(1,2), oma=c(0,0,0,0))
acf(yield.diff, lag.max=20, type="correlation", main="transformed and differenced ACF")
acf(yield.diff, lag.max=20, type="partial", main="transformed and differenced PACF")
par(mfrow=c(1,2), oma=c(0,0,0,0))
acf(yield.diff, lag.max=20, type="correlation", main="transformed and differenced ACF")
acf(yield.diff, lag.max=20, type="partial", main="transformed and differenced PACF")
yield.fit <- arima(yield$log[1:627], order=c(1,1,2))
res.yield <- as.vector(residuals(yield.fit))
fit.yield <- as.vector(fitted(yield.fit))
par(mfrow=c(2,2), oma=c(0,0,0,0))
qqnorm(res.yield, datax=T, pch=16, xlab='residual',main='')
qqline(res.yield, datax=T)
plot(fit.yield, res.yield, pch=16, cex=.5)
hist(res.yield,col='gray',xlab='residual',main='')
plot(res.yield, type="l", xlab='observation order', ylab='residuals')
par(mfrow=c(1,2), oma=c(0,0,0,0))
cheese.diff <- diff(cheese.data[,2], lag=1)
acf(cheese.diff, lag.max=12, type="correlation", main="differenced ACF")
acf(cheese.diff, lag.max=12, type="partial", main="differenced PACF")
par(mfrow=c(1,1), oma=c(0,0,0,0))
ice.forecast <- forecast(ice.fit, h=20)
plot(1:50,ice.data[,2], type="p", pch=16, cex=.5)
lines(ice.forecast$mean, col="blue")
lines(ice.forecast$upper[,2], col="red")
lines(ice.forecast$lower[,2], col="red")
ice.diff <- diff(ice.data[,2], lag=1)
plot(ice.data, type="l")
par(mfrow=c(1,2), oma=c(0,0,0,0))
ice.diff <- diff(ice.data[,2], lag=1)
acf(ice.diff, lag.max = 12, type="correlation", main="ACF")
acf(ice.diff], lag.max = 12, type="partial", main="ACF")
par(mfrow=c(1,2), oma=c(0,0,0,0))
ice.diff <- diff(ice.data[,2], lag=1)
acf(ice.diff, lag.max = 12, type="correlation", main="ACF")
acf(ice.diff, lag.max = 12, type="partial", main="ACF")
par(mfrow=c(1,1), oma=c(0,0,0,0))
plot(1:647,yield[[2]], pch=16, cex=.5)
lines(e.yield.forecast, type="l", col="blue")
lines(e.yield.upper, col="red")
lines(e.yield.lower, col="red")
par(mfrow=c(1,1), oma=c(0,0,0,0))
plot(1:647,yield[[2]], pch=16, cex=.5)
lines(e.yield.forecast, type="l", col="blue")
lines(e.yield.upper, col="red")
lines(e.yield.lower, col="red")
legend(10,14,c("observed data", "forecast", "95% UPL", "95% LCL"), pch=c(16,NA,NA,NA), lwd=c(NA,.5,.5,.5), cex=.55, col=c("black", "blue", "red", "red"))
par(mfrow=c(1,1), oma=c(0,0,0,0))
plot(1:48,cheese.data[,2], type="p", pch=16, cex=.5)
lines(cheese.forecast$mean, col="blue")
lines(cheese.forecast$lower[,2], col="red")
lines(cheese.forecast$upper[,2], col="red")
cheese.forecast <- forecast(cheese.fit.1, h=10)
par(mfrow=c(1,1), oma=c(0,0,0,0))
plot(1:48,cheese.data[,2], type="p", pch=16, cex=.5)
lines(cheese.forecast$mean, col="blue")
lines(cheese.forecast$lower[,2], col="red")
lines(cheese.forecast$upper[,2], col="red")
legend(1,40000,c("observed data", "forecast", "95% UPL", "95% LCL"), pch=c(16,NA,NA,NA), lwd=c(NA,.5,.5,.5), cex=.55, col=c("black", "blue", "red", "red"))
ice.forecast <- forecast(ice.fit, h=20)
plot(1:50,ice.data[,2], type="p", pch=16, cex=.5)
lines(ice.forecast$mean, col="blue")
lines(ice.forecast$upper[,2], col="red")
lines(ice.forecast$lower[,2], col="red")
par(mfrow=c(1,1), oma=c(0,0,0,0))
ice.forecast <- forecast(ice.fit, h=20)
plot(1:50,ice.data[,2], type="p", pch=16, cex=.5)
lines(ice.forecast$mean, col="blue")
lines(ice.forecast$upper[,2], col="red")
lines(ice.forecast$lower[,2], col="red")
par(mfrow=c(1,1), oma=c(0,0,0,0))
ice.forecast <- forecast(ice.fit, h=20)
plot(1:50,ice.data[,2], type="p", pch=16, cex=.5)
lines(ice.forecast$mean, col="blue")
lines(ice.forecast$upper[,2], col="red")
lines(ice.forecast$lower[,2], col="red")
legend(1,900000,c("observed data", "forecast", "95% UPL", "95% LCL"), pch=c(16,NA,NA,NA), lwd=c(NA,.5,.5,.5), cex=.55, col=c("black", "blue", "red", "red"))
install.packages("tidyverse")
install.packages("installr")
updateR()
library(installr)
updateR()
install.packages(c("arm", "backports", "BH", "bindr", "bindrcpp", "callr", "car", "caTools", "checkmate", "curl", "data.table", "digest", "dplyr", "eeptools", "evaluate", "fansi", "FNN", "forecast", "Formula", "ggplot2", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "htmlwidgets", "inline", "knitr", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "pinp", "pkgconfig", "plogr", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rprojroot", "RUnit", "scales", "sp", "spacetime", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "viridisLite", "xlsx", "xts", "yaml", "zoo"))
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
mgp
?mgp
library(ggplot2)
?mgp
?mpg
ggplot(mpg, aes(x = displ, y = cty, colour = hwy)) +
geom_point()
ggplot(mpg, aes(x=displ, y=cty, size=hwy))+
geom_point()
ggplot(mpg, aes(x=displ, y=cty, shape=hwy))+
geom_point
ggplot(mpg, aes(x = displ, y = cty, colour = hwy))
ggplot(mpg, aes(x=displ, y=cty, size=hwy))
ggplot(mpg, aes(x=displ, y=cty, shape=hwy))
ggplot(mpg, aes(x = displ, y = cty, colour = hwy))
ggplot(mpg, aes(x = displ, y = cty, colour = hwy))+
geom_point()
ggplot(mpg, aes(x=displ, y=cty, size=hwy))+
geom_point()
ggplot(mpg, aes(x=displ, y=cty, shape=hwy))+
geom_point()
packages <- as.data.frame(installed.packages())
install.packages(packages$Package)
install.packages(packages$Package)
install.packages(packages$Package)
install.packages(packages$Package)
setwd("C:/Users/emdho/Desktop/BIOS611")
read.csv("fev.csv")
fev <- read.csv("fev.csv")
fev <- read.csv("fev.csv", header=T)
View(fev)
fev1 <- fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)
library(dplyr)
fev1 <- fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)
fev <- fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)
library(ggplot)
library(ggplot2)
fev <- fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)%>%
ggplot(aes(time, logfev1))+
geom_line(mapping=aes(col=id))
fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)%>%
ggplot(aes(time, logfev1))+
geom_line(mapping=aes(col=id))
fev %>%
group_by(id)%>%
mutate(base_age = min(age))%>%
mutate(time=age-base_age)%>%
ggplot(data=fev, aes(time, logfev1))+
geom_line(mapping=aes(col=id))
fev %>%
group_by(id)%>%
mutate(base_age = min(age),time=age-base_age)%>%
ggplot(aes(time, logfev1, col=as.factor(id)))+
geom_line()
fev <- read.csv("fev.csv", header=T)
fev %>%
group_by(id)
fev %>%
group_by(id)%>%
mutate(base_age = min(age),time=age-base_age)%>%
ggplot(aes(time, logfev1, col=as.factor(id)))+
geom_line()
ChickWeight %>%
group_by(id)
ChickWeight %>%
group_by(Chick)
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(time, weight, col=as.factor(Chick)))+
geom_line()
ChickWeight %>%
group_by(Chick)
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
fev %>%
group_by(id)%>%
mutate(baseage = min(age), baseht = min(ht))
fev %>%
group_by(id)%>%
mutate(baseage = min(age), baseht = min(ht), time=age-baseage)%>%
select(-age,-ht)%>%
filter(baseage<7 | baseht<1.2)
library(tidyr)
data.wide <- data.frame(name=c("Wilbur", "Petunia", "Gregory"), a=c(67,80,64), b=c(56,90,50))
data.wide %>%
gather(key="drug", value="heart_rate")
data.wide %>%
gather(key=drug, value=heart_rate, a:b)
set.seed(10)
data.wide  <- data.frame(
id = 1:4,
trt = sample(rep(c('control', 'treatment'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
data.wide %>%
gather(key=info, value=time, work.T1:home.T2)
data.wide %>%
gather(key=info, value=time, -id, -trt)
data.long <- data.wide %>%
gather(key=info, value=time, -id, -trt)
data.long %>%
spread(key = info, value=time)
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
install.package("psych")
install.packages("psych")
libary(psych)
library(psych)
describe(iris) %>% kable
library(knitr)
describe(iris) %>% kable
describe(iris)
describeBy(iris, group="Species")
a =describeBy(iris, group="Species")
str(a)
a$setosa
data.long %>%
spread(key = variable, value=c(id, age))
fev %>%
gather(key=variable, value=value, ht, logfev1)
ggplot(data.long, aes(x=age, y=value)) +
geom_line(aes(color=id))+
geom_point(aes(color=id))+
geom_smooth(method=lm, linetype="dashed",
color="darkred", fill="blue")
install.packages("plotly")
install.packages("plotly")
library(plotly)
data.long
data.long <- fev %>%
gather(key=variable, value=value, ht, age, logfev1)
data.long
library(plotly)
x.norm = seq(-2,2, by=0.05)
y.norm=seq(-2,2, by=0.05)
p5 <- plot_ly(x=x.norm, y=y.norm, z=m) %>% add_surface()
m <- matrix(dnorm(x.norm) %*%t(dnorm(y.norm)), length(x.norm), length(y.norm))
p5 <- plot_ly(x=x.norm, y=y.norm, z=m) %>% add_surface()
library(plotly)
p5 <- plot_ly(x=x.norm, y=y.norm, z=m) %>% add_surface()
library(shiny)
install.packages("shiny")
library(plotly)
library(shiny)
library(shiny)
library(plotly)
p5 <- plot_ly(x=x.norm, y=y.norm, z=m) %>% add_surface()
library(shiny)
26+26^2+26^3
26+26^2+26^3+24^4
26+(26^2)+(26^3)+(26^4)
big_chick <- chick_weight %>%
filter(end_weight >= 200)
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
big_chick <- chick_weight %>%
filter(end_weight >= 200)
small_chick <- chick_weight %>%
filter(end_weight < 200)
ggplot()+
geom_point(data=big_chick, aes(Time, weight, col="blue")))+
ggplot()+
geom_point(data=big_chick, aes(Time, weight, col="blue"))+
geom_point(data=small_chick, aes(Time, weight, col="green"))
ggplot()+
geom_lines(data=big_chick, aes(Time, weight, col="blue"))+
geom_lines(data=small_chick, aes(Time, weight, col="green"))
ggplot()+
geom_line(data=big_chick, aes(Time, weight, col="blue"))+
geom_line(data=small_chick, aes(Time, weight, col="green"))
chick_weight$big <- x(0)
chick_weight$big <- c(0)
length(chick_weight$weight)
for (i in 578){
if (chick_weight$end_weight[i] >= 200){chick_weight$big = 1}
else {chick_weight$big=0}
}
chick_weight
View(chick_weigth)
View(chick_weight)
for (i in 578){
if (chick_weight$end_weight[i] >= 200){chick_weight$big[i] = 1}
else {chick_weight$big[i]=0}
}
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
chick_weight$big <- c(0)
for (i in 578){
if (chick_weight$end_weight[i] >= 200){chick_weight$big[i] = 1}
else {chick_weight$big[i]=0}
}
for (i in 578){
if (chick_weight$end_weight[i] >= 200) chick_weight$big[i] = 1
else chick_weight$big[i]=0
}
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
chick_weight %>%
mutate(big = ifelse(end_weight>=200, as.factor(1), as.factor(0)))
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, as.factor(1), as.factor(0)))
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
chick_weight
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=big)))+
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=big))+
geom_line()
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)
chick_weight %>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))
chick_weight <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
group_by(Chick)%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ggplot(aes(Time,weight,col=as.factor(big)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ggplot(mapping=(aes(Time, weight, col=as.factor(big))))+
geom_line()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()%>%
plot_ly()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()%>%
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ggplot(aes(Time, weight, col=as.factor(big)))+
geom_line()
ChickWeight %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(as.factor(big) = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))%>%
ggplot(aes(Time, weight, col=as.factor(big)))+
geom_line()
ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))
chicks1 <- ChickWeight%>%
group_by(Chick)%>%
mutate(end_weight = max(weight))%>%
mutate(big = ifelse(as.numeric(end_weight)>=200, 1,0))
head(chicks1)
chicks1 %>%
group_by(Chick)
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line()
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(big)))+
geom_line()
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line(aes(linetype=as.factor(big)))
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time[Time<=5], weight, col=as.factor(Chick)))+
geom_line(aes(linetype=as.factor(big)))
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time[Time<=5], weight[Time<=5], col=as.factor(Chick)))+
geom_line(aes(linetype=as.factor(big)))
chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time[Time<=5], weight[Time<=5], col=as.factor(Chick[Time<=5])))+
geom_line(aes(linetype=as.factor(big[Time<=5])))
big_little_plot <- chicks1 %>%
group_by(Chick)%>%
ggplot(aes(Time, weight, col=as.factor(Chick)))+
geom_line(aes(linetype=as.factor(big)))
library(plotly)
plot_ly(big_little_plot)
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "bit", "callr", "car", "caTools", "checkmate", "curl", "data.table", "ddalpha", "digest", "dotCall64", "dplyr", "eeptools", "elasticnet", "emplik", "evaluate", "fansi", "FNN", "forecast", "Formula", "glue", "gstat", "haven", "highr", "hms", "htmlTable", "httpuv", "inline", "ipred", "jomo", "later", "lazyeval", "lme4", "lmtest", "maptools", "munsell", "openssl", "openxlsx", "pan", "pinp", "pkgconfig", "polyclip", "processx", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readxl", "reshape2", "rJava", "rlang", "rmarkdown", "rncl", "robustbase", "rprojroot", "RSpectra", "RUnit", "scales", "sourcetools", "sp", "spacetime", "spatstat.utils", "stringdist", "stringi", "stringr", "survival", "tidyr", "tseries", "utf8", "vcd", "viridis", "xlsx", "xts", "yaml", "zoo"))
